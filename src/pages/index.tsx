"use client";

import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { Node, board } from "../lib/tree";

const fillCircle = {
  1: "red",
  2: "blue",
};

const Home: NextPage = () => {
  const [{ game, status, player }, setGame] = useState(board.getGame());

  const onPlay = (node: Node) => {
    const possibleGame = board.play(node);
    if (possibleGame) {
      setGame(possibleGame);
    }
  };

  const onClear = () => {
    board.clear();
    setGame(board.getGame());
  };

  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
      }}
    >
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h2>{status}</h2>
      {player && (
        <h3
          style={{
            display: "flex",
            alignItems: "center",
            gap: 2,
          }}
        >
          <span
            style={{
              background: fillCircle[player],
              width: "1rem",
              height: "1rem",
              display: "block",
              borderRadius: "50%",
            }}
          ></span>{" "}
          turn
        </h3>
      )}
      <svg width="90vw" height="90vh" viewBox="0 0 110 110">
        {game.lines.map((line, i) => (
          <g key={line.id} id={line.id}>
            <line
              x1={line.nodes[0].x}
              y1={line.nodes[0].y}
              x2={line.nodes[1].x}
              y2={line.nodes[1].y}
              stroke="black"
            ></line>
            <line
              x1={line.nodes[1].x}
              y1={line.nodes[1].y}
              x2={line.nodes[2].x}
              y2={line.nodes[2].y}
              stroke="black"
            ></line>
            {line.nodes.map((node) => (
              <circle
                key={node.id}
                r={2}
                cx={node.x}
                cy={node.y}
                fill={node?.player ? fillCircle[node.player] : "white"}
                stroke="black"
                onClick={() => onPlay(node)}
                id={node.id}
                cursor={node?.player ? "not-allowed" : "pointer"}
              ></circle>
            ))}
          </g>
        ))}
      </svg>
    </div>
  );
};

export default Home;
